/*
** Created by doom on 18/10/18.
*/

#ifndef FOR_LIBCXX_ITERATOR
#define FOR_LIBCXX_ITERATOR

#include <type_traits>
#include <utility>

namespace std
{
    struct input_iterator_tag
    {
    };

    struct output_iterator_tag
    {
    };

    struct forward_iterator_tag : public input_iterator_tag
    {
    };

    struct bidirectional_iterator_tag : public forward_iterator_tag
    {
    };

    struct random_access_iterator_tag : public bidirectional_iterator_tag
    {
    };

    template <typename Iterator>
    struct iterator_traits
    {
        using difference_type = typename Iterator::difference_type;
        using value_type = typename Iterator::value_type;
        using pointer = typename Iterator::pointer;
        using reference = typename Iterator::reference;
        using iterator_category = typename Iterator::iterator_category;
    };

    template <typename T>
    struct iterator_traits<T *>
    {
        using difference_type = std::ptrdiff_t;
        using value_type = T;
        using pointer = T *;
        using reference = T &;
        using iterator_category = std::random_access_iterator_tag;
    };

    template <typename T>
    struct iterator_traits<const T *>
    {
        using difference_type = std::ptrdiff_t;
        using value_type = T;
        using pointer = const T *;
        using reference = const T &;
        using iterator_category = std::random_access_iterator_tag;
    };

    template <typename Iterator>
    class reverse_iterator
    {
    public:
        using iterator_type = Iterator;
        using difference_type = typename Iterator::difference_type;
        using value_type = typename Iterator::value_type;
        using pointer = typename Iterator::pointer;
        using reference = typename Iterator::reference;
        using iterator_category = typename Iterator::iterator_category;

        constexpr reverse_iterator() noexcept(std::is_nothrow_constructible_v<iterator_type>) : _iter()
        {
        }

        constexpr explicit reverse_iterator(iterator_type it)
        noexcept(std::is_nothrow_move_constructible_v<iterator_type>) : _iter(std::move(it))
        {
        }

        template <typename OtherIterator>
        constexpr explicit reverse_iterator(const reverse_iterator<OtherIterator> &it)
        noexcept(std::is_nothrow_constructible_v<Iterator, const OtherIterator &>) : _iter(it.base())
        {
        }

        constexpr iterator_type base() const noexcept(std::is_nothrow_copy_constructible_v<iterator_type>)
        {
            return _iter;
        }

        constexpr reference operator*() const noexcept
        {
            /**
             * A given reverse_iterator<iterator_type> rev_it always holds an iterator_type it such as
             * &*(it - 1) == &*rev_it. See en.cppreference.com/w/cpp/iterator/reverse_iterator
             */
            iterator_type tmp = _iter;
            return *--tmp;
        }

        constexpr pointer operator->() const noexcept
        {
            return &**this;
        }

        constexpr reverse_iterator &operator++() noexcept
        {
            --_iter;
            return *this;
        }

        constexpr reverse_iterator &operator--() noexcept
        {
            ++_iter;
            return *this;
        }

        constexpr reverse_iterator operator++(int) noexcept
        {
            auto ret = *this;
            ++*this;
            return ret;
        }

        constexpr reverse_iterator operator--(int) noexcept
        {
            auto ret = *this;
            --*this;
            return ret;
        }

        constexpr reverse_iterator operator+(difference_type n) noexcept
        {
            return reverse_iterator(_iter - n);
        }

        constexpr reverse_iterator operator-(difference_type n) noexcept
        {
            return reverse_iterator(_iter + n);
        }

        constexpr reverse_iterator &operator+=(difference_type n) noexcept
        {
            _iter -= n;
            return *this;
        }

        constexpr reverse_iterator operator-=(difference_type n) noexcept
        {
            _iter += n;
            return *this;
        }

    private:
        iterator_type _iter;
    };

    template <typename Iterator>
    class move_iterator
    {
    public:
        using iterator_type = Iterator;
        using difference_type = typename std::iterator_traits<Iterator>::difference_type;
        using value_type = typename std::iterator_traits<Iterator>::value_type;
        using pointer = Iterator;
        using reference = std::conditional_t<
            std::is_reference_v<typename std::iterator_traits<Iterator>::reference>,
            std::add_rvalue_reference_t<std::remove_reference_t<typename std::iterator_traits<Iterator>::reference>>,
            typename std::iterator_traits<Iterator>::reference
        >;
        using iterator_category = typename std::iterator_traits<Iterator>::iterator_category;

        constexpr move_iterator() noexcept(std::is_nothrow_constructible_v<iterator_type>) : _iter()
        {
        }

        constexpr explicit move_iterator(iterator_type it)
        noexcept(std::is_nothrow_move_constructible_v<iterator_type>) : _iter(std::move(it))
        {
        }

        template <typename OtherIterator>
        constexpr explicit move_iterator(const move_iterator<OtherIterator> &it)
        noexcept(std::is_nothrow_constructible_v<Iterator, const OtherIterator &>) : _iter(it.base())
        {
        }

        constexpr iterator_type base() const noexcept(std::is_nothrow_copy_constructible_v<iterator_type>)
        {
            return _iter;
        }

        constexpr reference operator*() const noexcept
        {
            return static_cast<reference>(*_iter);
        }

        constexpr pointer operator->() const noexcept
        {
            return _iter;
        }

        constexpr move_iterator &operator++() noexcept
        {
            ++_iter;
            return *this;
        }

        constexpr move_iterator &operator--() noexcept
        {
            --_iter;
            return *this;
        }

        constexpr move_iterator operator++(int) noexcept
        {
            auto ret = *this;
            ++*this;
            return ret;
        }

        constexpr move_iterator operator--(int) noexcept
        {
            auto ret = *this;
            --*this;
            return ret;
        }

        constexpr move_iterator operator+(difference_type n) noexcept
        {
            return move_iterator(_iter + n);
        }

        constexpr move_iterator operator-(difference_type n) noexcept
        {
            return move_iterator(_iter - n);
        }

        constexpr move_iterator &operator+=(difference_type n) noexcept
        {
            _iter += n;
            return *this;
        }

        constexpr move_iterator operator-=(difference_type n) noexcept
        {
            _iter -= n;
            return *this;
        }

    private:
        iterator_type _iter;
    };

    template <typename Iterator>
    inline constexpr std::move_iterator<Iterator> make_move_iterator(Iterator it)
    {
        return move_iterator<Iterator>(it);
    }

    template <typename T, std::size_t Size>
    inline constexpr T *begin(T (&arr)[Size]) noexcept
    {
        return arr;
    }

    template <typename T, std::size_t Size>
    inline constexpr T *end(T (&arr)[Size]) noexcept
    {
        return arr + Size;
    }
}

#endif /* !FOR_LIBCXX_ITERATOR */
