/*
** Created by doom on 11/11/18.
*/

#ifndef FOR_LIBCXX_LIMITS
#define FOR_LIBCXX_LIMITS

#include <climits>

namespace std
{
    template <typename T>
    struct numeric_limits
    {
    };

    template <>
    struct numeric_limits<char>
    {
        static constexpr char min() noexcept
        {
            return CHAR_MIN;
        }

        static constexpr char max() noexcept
        {
            return CHAR_MAX;
        }
    };

    template <>
    struct numeric_limits<signed char>
    {
        static constexpr signed char min() noexcept
        {
            return SCHAR_MIN;
        }

        static constexpr signed char max() noexcept
        {
            return SCHAR_MAX;
        }
    };

    template <>
    struct numeric_limits<unsigned char>
    {
        static constexpr unsigned char min() noexcept
        {
            return 0;
        }

        static constexpr unsigned char max() noexcept
        {
            return UCHAR_MAX;
        }
    };

    template <>
    struct numeric_limits<short>
    {
        static constexpr short min() noexcept
        {
            return SHRT_MIN;
        }

        static constexpr short max() noexcept
        {
            return SHRT_MAX;
        }
    };

    template <>
    struct numeric_limits<unsigned short>
    {
        static constexpr unsigned short min() noexcept
        {
            return 0;
        }

        static constexpr unsigned short max() noexcept
        {
            return USHRT_MAX;
        }
    };

    template <>
    struct numeric_limits<int>
    {
        static constexpr int min() noexcept
        {
            return INT_MIN;
        }

        static constexpr int max() noexcept
        {
            return INT_MAX;
        }
    };

    template <>
    struct numeric_limits<unsigned int>
    {
        static constexpr unsigned int min() noexcept
        {
            return 0;
        }

        static constexpr unsigned int max() noexcept
        {
            return UINT_MAX;
        }
    };

    template <>
    struct numeric_limits<long>
    {
        static constexpr long min() noexcept
        {
            return LONG_MIN;
        }

        static constexpr long max() noexcept
        {
            return LONG_MAX;
        }
    };

    template <>
    struct numeric_limits<unsigned long>
    {
        static constexpr unsigned long min() noexcept
        {
            return 0;
        }

        static constexpr unsigned long max() noexcept
        {
            return ULONG_MAX;
        }
    };

    template <>
    struct numeric_limits<long long>
    {
        static constexpr long long min() noexcept
        {
            return LLONG_MIN;
        }

        static constexpr long long max() noexcept
        {
            return LLONG_MAX;
        }
    };

    template <>
    struct numeric_limits<unsigned long long>
    {
        static constexpr unsigned long long min() noexcept
        {
            return 0;
        }

        static constexpr unsigned long long max() noexcept
        {
            return ULLONG_MAX;
        }
    };
}

#endif /* !FOR_LIBCXX_LIMITS */
