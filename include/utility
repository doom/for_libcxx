/*
** Created by doom on 10/10/18.
*/

#ifndef FOR_LIBCXX_UTILITY
#define FOR_LIBCXX_UTILITY

#include <cstddef>
#include <type_traits>
#include <details/move_and_forward.hpp>
#include <details/more_type_traits.hpp>
#include <details/swap.hpp>

namespace std
{
    template <typename T>
    T &&declval() noexcept;

    struct in_place_t
    {
        explicit in_place_t() = default;
    };

    inline constexpr in_place_t in_place{};

    template <typename T, T ...Ints>
    class integer_sequence
    {
        static constexpr std::size_t size() noexcept
        {
            return sizeof...(Ints);
        }
    };

    template <std::size_t ...Ints>
    using index_sequence = std::integer_sequence<std::size_t, Ints...>;

    namespace details
    {
        template <typename Seq1, typename Seq2>
        struct concat_iseqs;

        template <std::size_t ...Seq1Values, std::size_t ...Seq2Values>
        struct concat_iseqs<std::index_sequence<Seq1Values...>, std::index_sequence<Seq2Values...>>
        {
            using type = std::index_sequence<Seq1Values..., (sizeof...(Seq1Values) + Seq2Values)...>;
        };

        template <std::size_t Max>
        struct make_iseq : concat_iseqs<
            typename make_iseq<Max / 2>::type,
            typename make_iseq<Max - (Max / 2)>::type
        >
        {
        };

        template <>
        struct make_iseq<1>
        {
            using type = std::index_sequence<0>;
        };

        template <typename FromT, typename ToT>
        struct iseq_cast;

        template <typename FromT, FromT ...Values, typename ToT>
        struct iseq_cast<std::integer_sequence<FromT, Values...>, ToT>
        {
            using type = std::integer_sequence<ToT, Values...>;
        };
    }

    template <typename T, T N>
    using make_integer_sequence = typename details::iseq_cast<typename details::make_iseq<N>::type, T>::type;

    template <std::size_t N>
    using make_index_sequence = typename details::make_iseq<N>::type;

    template <typename ...Types>
    using index_sequence_for = make_index_sequence<sizeof...(Types)>;

    template <typename T1, typename T2>
    class pair
    {
    public:
        using first_type = T1;
        using second_type = T2;

        T1 first;
        T2 second;

        template <typename U1 = T1, typename U2 = T2,
            std::more::overload_n_if<
                std::more::is_implicitly_default_constructible_v<U1>
                && std::more::is_implicitly_default_constructible_v<U2>> = 1
        >
        constexpr pair() : first(), second()
        {
        }

        template <typename U1 = T1, typename U2 = T2,
            std::more::overload_n_if<!(
                std::more::is_implicitly_default_constructible_v<U1>
                && std::more::is_implicitly_default_constructible_v<U2>)> = 2
        >
        explicit constexpr pair() : first(), second()
        {
        }

        template <typename U1 = T1, typename U2 = T2,
            typename = std::enable_if_t<std::is_copy_constructible_v<U1> && std::is_copy_constructible_v<U2>
            >,
            std::more::overload_n_if<std::is_convertible_v<const U1 &, T1> && std::is_convertible_v<const U2 &, T2>> = 1
        >
        constexpr pair(const U1 &a, const U2 &b) : first(a), second(b)
        {
        }

        template <typename U1 = T1, typename U2 = T2,
            typename = std::enable_if_t<std::is_copy_constructible_v<U1> && std::is_copy_constructible_v<U2>
            >,
            std::more::overload_n_if<!(std::is_convertible_v<const U1 &, T1> &&
                                       std::is_convertible_v<const U2 &, T2>)> = 2
        >
        explicit constexpr pair(const U1 &a, const U2 &b) : first(a), second(b)
        {
        }

        template <typename U1, typename U2,
            typename = std::enable_if_t<std::is_constructible_v<T1, U1 &&> && std::is_constructible_v<T2, U2 &&>>,
            std::more::overload_n_if<std::is_convertible_v<U1 &&, T1> && std::is_convertible_v<U2 &&, T2>> = 1
        >
        constexpr pair(U1 &&u1, U2 &&u2) : first(std::forward<U1>(u1)), second(std::forward<U2>(u2))
        {
        }

        template <typename U1, typename U2,
            typename = std::enable_if_t<std::is_constructible_v<T1, U1 &&> && std::is_constructible_v<T2, U2 &&>>,
            std::more::overload_n_if<!(std::is_convertible_v<U1 &&, T1> && std::is_convertible_v<U2 &&, T2>)> = 2
        >
        explicit constexpr pair(U1 &&u1, U2 &&u2) : first(std::forward<U1>(u1)), second(std::forward<U2>(u2))
        {
        }

        template <typename U1, typename U2,
            typename = std::enable_if_t<!std::is_same_v<pair<U1, U2>, pair>>,
            typename = std::enable_if_t<
                std::is_constructible_v<T1, const U1 &> && std::is_constructible_v<T2, const U2 &>
            >,
            std::more::overload_n_if<
                std::is_convertible_v<const U1 &, T1> && std::is_convertible_v<const U2 &, T2>
            > = 1
        >
        constexpr pair(const pair<U1, U2> &p) : first(p.first), second(p.second)
        {
        }

        template <typename U1, typename U2,
            typename = std::enable_if_t<!std::is_same_v<pair<U1, U2>, pair>>,
            typename = std::enable_if_t<
                std::is_constructible_v<T1, const U1 &> && std::is_constructible_v<T2, const U2 &>
            >,
            std::more::overload_n_if<
                !(std::is_convertible_v<const U1 &, T1> && std::is_convertible_v<const U2 &, T2>)
            > = 2
        >
        explicit constexpr pair(const pair<U1, U2> &p) : first(p.first), second(p.second)
        {
        }

        constexpr pair(const pair &) = default;

        template <typename U1, typename U2,
            typename = std::enable_if_t<!std::is_same_v<pair<U1, U2>, pair>>,
            typename = std::enable_if_t<
                std::is_constructible_v<T1, U1 &&> && std::is_constructible_v<T2, U2 &&>
            >,
            std::more::overload_n_if<
                std::is_convertible_v<U1 &&, T1> && std::is_convertible_v<U2 &&, T2>
            > = 1
        >
        constexpr pair(pair<U1, U2> &&p) : first(std::forward<U1>(p.first)), second(std::forward<U2>(p.second))
        {
        }

        template <typename U1, typename U2,
            typename = std::enable_if_t<!std::is_same_v<pair<U1, U2>, pair>>,
            typename = std::enable_if_t<
                std::is_constructible_v<T1, U1 &&> && std::is_constructible_v<T2, U2 &&>
            >,
            std::more::overload_n_if<
                !(std::is_convertible_v<U1 &&, T1> && std::is_convertible_v<U2 &&, T2>)
            > = 2
        >
        explicit constexpr pair(pair<U1, U2> &&p) : first(std::forward<U1>(p.first)), second(std::forward<U2>(p.second))
        {
        }

        constexpr pair(pair &&pair) noexcept = default;

        ~pair() noexcept = default;

        pair &operator=(const pair &other) = default;

        template <typename U1, typename U2,
            typename = std::enable_if_t<!std::is_same_v<pair<U1, U2>, pair>>,
            typename = std::enable_if_t<
                std::is_assignable_v<T1 &, const U1 &> && std::is_assignable_v<T2 &, const U2 &>
            >
        >
        pair &operator=(const pair<U1, U2> &other)
        {
            first = other.first;
            second = other.second;
            return *this;
        }

        pair &operator=(pair &&other) noexcept = default;

        template <typename U1, typename U2,
            typename = std::enable_if_t<!std::is_same_v<pair<U1, U2>, pair>>,
            typename = std::enable_if_t<
                std::is_assignable_v<T1 &, U1 &&> && std::is_assignable_v<T2 &, U2 &&>
            >
        >
        pair &operator=(pair<U1, U2> &&other)
        noexcept(is_nothrow_move_assignable_v<T1> && is_nothrow_move_assignable_v<T2>)
        {
            first = other.first;
            second = other.second;
            return *this;
        }

        void swap(pair &other) noexcept(noexcept(swap(first, other.first)) && noexcept(swap(second, other.second)))
        {
            using std::swap;
            swap(first, other.first);
            swap(second, other.second);
        }
    };

    template <typename T1, typename T2>
    constexpr bool operator==(const pair<T1, T2> &lhs, const pair<T1, T2> &rhs)
    {
        return lhs.first == rhs.first && lhs.second == rhs.second;
    }

    template <typename T1, typename T2>
    constexpr bool operator!=(const pair<T1, T2> &lhs, const pair<T1, T2> &rhs)
    {
        return !(lhs == rhs);
    }

    template <typename T1, typename T2>
    constexpr bool operator<(const pair<T1, T2> &lhs, const pair<T1, T2> &rhs)
    {
        return lhs.first < rhs.first || (!(rhs.first < lhs.first) && lhs.second < rhs.second);
    }

    template <typename T1, typename T2>
    constexpr bool operator<=(const pair<T1, T2> &lhs, const pair<T1, T2> &rhs)
    {
        return !(rhs < lhs);
    }

    template <typename T1, typename T2>
    constexpr bool operator>(const pair<T1, T2> &lhs, const pair<T1, T2> &rhs)
    {
        return rhs < lhs;
    }

    template <typename T1, typename T2>
    constexpr bool operator>=(const pair<T1, T2> &lhs, const pair<T1, T2> &rhs)
    {
        return !(lhs < rhs);
    }

    template <class T1, class T2>
    constexpr auto make_pair(T1 &&t1, T2 &&t2)
    {
        using U1 = more::decay_and_unwrap_ref_t<T1>;
        using U2 = more::decay_and_unwrap_ref_t<T2>;

        return std::pair<U1, U2>(std::forward<U1>(t1), std::forward<U2>(t2));
    }
}

#endif /* !FOR_LIBCXX_UTILITY */
