/*
** Created by doom on 20/10/18.
*/

#ifndef FOR_LIBCXX_ALGORITHM
#define FOR_LIBCXX_ALGORITHM

#include <iterator>
#include <utility>
#include <functional>
#include <details/move_and_forward.hpp>

namespace std
{
    template <typename T>
    constexpr const T &min(const T &a, const T &b) noexcept(noexcept(a < b))
    {
        return a > b ? b : a;
    }

    template <typename T>
    constexpr const T &max(const T &a, const T &b) noexcept(noexcept(a > b))
    {
        return a < b ? b : a;
    }

    template <typename ForwardIt, typename Comparator>
    constexpr ForwardIt min_element(ForwardIt first, ForwardIt last, Comparator cmp) noexcept
    {
        if (first == last)
            return last;

        auto smol = first;

        while (++first != last) {
            if (cmp(*first, *smol))
                smol = first;
        }
        return smol;
    }

    template <typename ForwardIt>
    constexpr ForwardIt min_element(ForwardIt first, ForwardIt last) noexcept
    {
        return min_element(first, last, std::less<>());
    }

    template <typename ForwardIt, typename Comparator>
    constexpr ForwardIt max_element(ForwardIt first, ForwardIt last, Comparator cmp) noexcept
    {
        if (first == last)
            return last;

        auto big = first;

        while (++first != last) {
            if (cmp(*big, *first))
                big = first;
        }
        return big;
    }

    template <typename ForwardIt>
    constexpr ForwardIt max_element(ForwardIt first, ForwardIt last) noexcept
    {
        return max_element(first, last, std::less<>());
    }

    template <typename ForwardIt, typename Comparator>
    std::pair<ForwardIt, ForwardIt> minmax_element(ForwardIt first, ForwardIt last, Comparator is_less)
    {
        ForwardIt smol = first;
        ForwardIt big = first;

        if (first == last || ++first == last) {
            return {smol, big};
        }

        if (is_less(*first, *smol)) {
            smol = first;
        } else {
            big = first;
        }

        while (++first != last) {
            ForwardIt i = first;

            if (++first == last) {
                if (is_less(*i, *smol)) {
                    smol = i;
                } else if (!(is_less(*i, *big))) {
                    big = i;
                }
                break;
            } else {
                if (is_less(*first, *i)) {
                    if (is_less(*first, *smol)) {
                        smol = first;
                    }
                    if (!(is_less(*i, *big))) {
                        big = i;
                    }
                } else {
                    if (is_less(*i, *smol)) {
                        smol = i;
                    }
                    if (!(is_less(*first, *big))) {
                        big = first;
                    }
                }
            }
        }

        return {smol, big};
    }

    template <typename ForwardIt>
    std::pair<ForwardIt, ForwardIt> minmax_element(ForwardIt first, ForwardIt last)
    {
        return std::minmax_element(first, last, std::less<>());
    }

    template <typename T, typename Compare>
    constexpr const T &clamp(const T &v, const T &lo, const T &hi, Compare cmp)
    {
        if (cmp(v, lo)) {
            return lo;
        }
        if (cmp(hi, v)) {
            return hi;
        }
        return v;
    }

    template <typename T>
    constexpr const T &clamp(const T &v, const T &lo, const T &hi)
    {
        return clamp(v, lo, hi, std::less<>());
    }

    template <typename InputIt, typename UnaryPredicate>
    constexpr InputIt find_if(InputIt first, InputIt last, UnaryPredicate p) noexcept
    {
        while (first != last) {
            if (p(*first)) {
                return first;
            }
            ++first;
        }
        return last;
    }

    template <typename InputIt, typename UnaryPredicate>
    constexpr InputIt find_if_not(InputIt first, InputIt last, UnaryPredicate p) noexcept
    {
        return find_if(first, last, [&p](auto &&v) {
            return !p(std::forward<decltype(v)>(v));
        });
    }

    template <typename InputIt, typename T>
    constexpr InputIt find(InputIt first, InputIt last, const T &value) noexcept
    {
        return find_if(first, last, [&value](auto &&v) {
            value == std::forward<decltype(v)>(v);
        });
    }

    template <typename InputIt, typename UnaryPredicate>
    constexpr bool all_of(InputIt first, InputIt last, UnaryPredicate p)
    {
        while (first != last) {
            if (!p(*first)) {
                return false;
            }
            ++first;
        }
        return true;
    }

    template <typename InputIt, typename UnaryPredicate>
    constexpr bool any_of(InputIt first, InputIt last, UnaryPredicate p)
    {
        while (first != last) {
            if (p(*first)) {
                return true;
            }
            ++first;
        }
        return false;
    }

    template <typename InputIt, typename UnaryPredicate>
    constexpr bool none_of(InputIt first, InputIt last, UnaryPredicate p)
    {
        while (first != last) {
            if (p(*first)) {
                return false;
            }
            ++first;
        }
        return true;
    }

    template <typename InputIt, typename UnaryPredicate>
    constexpr typename std::iterator_traits<InputIt>::difference_type count_if(InputIt first,
                                                                               InputIt last,
                                                                               UnaryPredicate p) noexcept
    {
        auto ret = 0;

        while (first != last) {
            if (p(*first)) {
                ++ret;
            }
        }
        return ret;
    }

    template <typename InputIt, typename T>
    constexpr typename std::iterator_traits<InputIt>::difference_type count(InputIt first,
                                                                            InputIt last,
                                                                            const T &value) noexcept
    {
        return count_if(first, last, [&value](auto &&v) {
            return value == std::forward<decltype(v)>(v);
        });
    }

    template <typename InputIt, typename OutputIt>
    constexpr OutputIt copy(InputIt in_first, InputIt in_last, OutputIt out_first)
    {
        //TODO: optimize using memmove for trivially copyable types

        while (in_first != in_last) {
            *out_first = *in_first;
            ++out_first;
            ++in_first;
        }
        return out_first;
    }

    template <typename InputIt, typename OutputIt, typename UnaryPredicate>
    constexpr OutputIt copy_if(InputIt in_first, InputIt in_last, OutputIt out_first, UnaryPredicate pred)
    {
        while (in_first != in_last) {
            if (pred(*in_first)) {
                *out_first = *in_first;
                ++out_first;
            }
            ++in_first;
        }
        return out_first;
    }

    template <typename InputIt, typename OutputIt>
    constexpr OutputIt move(InputIt in_first, InputIt in_last, OutputIt out_first)
    {
        while (in_first != in_last) {
            *out_first = std::move(*in_first);
            ++out_first;
            ++in_first;
        }
        return out_first;
    }

    template <typename InputIt, typename OutputIt>
    constexpr OutputIt move_backward(InputIt in_first, InputIt in_last, OutputIt out_last)
    {
        while (in_first != in_last) {
            --out_last;
            --in_last;
            *out_last = std::move(*in_last);
        }
        return out_last;
    }

    template <typename InputIt, typename OutputIt, typename UnaryOperation>
    constexpr OutputIt transform(InputIt in_first, InputIt in_last, OutputIt out_first, UnaryOperation f)
    {
        while (in_first != in_last) {
            *out_first++ = f(*in_first++);
        }
        return out_first;
    }

    template <typename InputIt1, typename InputIt2, typename OutputIt, typename BinaryOperation>
    constexpr OutputIt transform(InputIt1 in_first1, InputIt1 in_last1, InputIt2 in_first2,
                                 OutputIt out_first, BinaryOperation f)
    {
        while (in_first1 != in_last1) {
            *out_first++ = f(*in_first1++, *in_first2++);
        }
        return out_first;
    }

    template <typename InputIt, typename UnaryFunction>
    constexpr UnaryFunction for_each(InputIt first, InputIt last, UnaryFunction f)
    {
        while (first != last) {
            f(*first);
            ++first;
        }
        return f;
    }

    template <typename ForwardIt, typename T>
    void iota(ForwardIt first, ForwardIt last, T value)
    {
        while (first != last) {
            *first = value;
            ++first;
            ++value;
        }
    }

    template <typename ForwardIt, class UnaryPredicate>
    constexpr ForwardIt remove_if(ForwardIt first, ForwardIt last, UnaryPredicate p)
    {
        auto it = std::find_if(first, last, p);

        if (it == last) {
            return last;
        }
        first = it;
        while (++it != last) {
            if (!p(*it)) {
                *first++ = std::move(*it);
            }
        }
        return first;
    }

    template <typename ForwardIt, class T>
    constexpr ForwardIt remove(ForwardIt first, ForwardIt last, const T &value)
    {
        return remove_if(first, last, [&value](const auto &other) {
            return other == value;
        });
    }

    template <typename ForwardIt1, typename ForwardIt2>
    constexpr void iter_swap(ForwardIt1 a, ForwardIt2 b)
    {
        using std::swap;
        swap(*a, *b);
    }

    template <typename ForwardIt>
    constexpr ForwardIt rotate(ForwardIt first, ForwardIt n_first, ForwardIt last)
    {
        if (first == n_first) {
            return last;
        }
        if (n_first == last) {
            return first;
        }

        ForwardIt left = first;
        ForwardIt right = n_first;
        ForwardIt old_first = first;

        while (right != last) {
            if (left == old_first) {
                old_first = right;
            }
            iter_swap(left, right);
            ++left;
            ++right;
        }
        rotate(left, old_first, right);
        return left;
    }

    template <typename ForwardIt, typename T>
    constexpr void fill(ForwardIt first, ForwardIt last, const T &value)
    {
        while (first != last) {
            *first = value;
            ++first;
        }
    }

    template <typename OutputIt, typename Size, typename T>
    constexpr OutputIt fill_n(OutputIt first, Size count, const T &value)
    {
        while (count--) {
            *first = value;
            ++first;
        }
        return first;
    }

    template <typename ForwardIt, typename Generator>
    constexpr void generate(ForwardIt first, ForwardIt last, Generator g)
    {
        while (first != last) {
            *first = g();
            ++first;
        }
    }

    template <typename OutputIt, typename Size, typename Generator>
    constexpr OutputIt generate_n(OutputIt first, Size count, Generator g)
    {
        while (count--) {
            *first = g();
            ++first;
        }
        return first;
    }

    template <typename BidirIt>
    constexpr void reverse(BidirIt first, BidirIt last)
    {
        while (first != last && first != --last) {
            std::iter_swap(first, last);
            ++first;
        }
    }

    template <typename ForwardIt, typename BinaryPredicate>
    constexpr ForwardIt unique(ForwardIt first, ForwardIt last, BinaryPredicate p)
    {
        if (first == last) {
            return last;
        }

        ForwardIt out = first;
        while (++first != last) {
            if (!p(*first, *out) && ++out != first) {
                *out = std::move(*first);
            }
        }
        return ++out;
    }

    template <typename ForwardIt>
    constexpr ForwardIt unique(ForwardIt first, ForwardIt last)
    {
        return unique(first, last, [](auto &&a, auto &&b) {
            return a == b;
        });
    }

    template <typename ForwardIt, typename UnaryPredicate, typename T>
    constexpr void replace_if(ForwardIt first, ForwardIt last, UnaryPredicate p, const T &new_value)
    {
        while (first != last) {
            if (p(*first)) {
                *first = new_value;
            }
            ++first;
        }
    }

    template <typename ForwardIt, typename T>
    constexpr void replace(ForwardIt first, ForwardIt last, const T &old_value, const T &new_value)
    {
        return replace_if(first, last, [&old_value](const auto &v) {
            return v == old_value;
        }, new_value);
    }

    template <typename InputIt, typename OutputIt, typename UnaryPredicate, typename T>
    constexpr OutputIt replace_copy_if(InputIt in_first, InputIt in_last, OutputIt out_first,
                                       UnaryPredicate p, const T &new_value)
    {
        while (in_first != in_last) {
            if (p(*in_first)) {
                *out_first = new_value;
            } else {
                *out_first = *in_first;
            }
            ++out_first;
            ++in_first;
        }
        return out_first;
    }

    template <typename InputIt, typename OutputIt, typename T>
    constexpr OutputIt replace_copy(InputIt in_first, InputIt in_last, OutputIt out_first,
                                    const T &old_value, const T &new_value)
    {
        return replace_copy_if(in_first, in_last, out_first, [&old_value](const auto &v) {
            return v == old_value;
        }, new_value);
    }

    template <typename InputIt1, typename InputIt2, typename Compare>
    constexpr bool lexicographical_compare(InputIt1 first1, InputIt1 last1,
                                           InputIt2 first2, InputIt2 last2, Compare cmp)
    {
        while (first1 != last1 && first2 != last2) {
            if (cmp(*first1, *first2)) {
                return true;
            }
            if (cmp(*first2, *first1)) {
                return false;
            }
            ++first1;
            ++first2;
        }
        /** 1 is less than 2 if it is shorter (i.e. if first1 reached last1 but first2 did not reach last2) */
        return first1 == last1 && first2 != last2;
    }

    template <typename InputIt1, typename InputIt2>
    constexpr bool lexicographical_compare(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2)
    {
        return lexicographical_compare(first1, last1, first2, last2, std::less<void>{});
    }
}

#endif /* !FOR_LIBCXX_ALGORITHM */
